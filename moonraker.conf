########################################################## \
############# MOONRAKER CONFIG FILE ###################### + --> To configure moonraker... :)
########################################################## /

[include moonraker/base.conf] # Do not remove this line

# This file is yours! Feel free to edit it in order to include all the needed
# things to configure moonraker to your machine. Also, keep in mind that it
# will not be erased when updating the config and it will be kept as you've set it.

# The moonraker/base.conf file should contain a good and sane default configuration,
# however, feel free to override its sections and adapt the config to your needs.

# ------------------------------------------------------------------------------------------


##### Exclude object pre-processing -------------------------------
## This can be deactivated in case you use an offline processor in your slicer
[include moonraker/exclude_object.conf]
# -----------------------------------------------------------------

##### Fluidd update management ------------------------------------
# [include moonraker/fluidd.conf]
# -----------------------------------------------------------------

##### Mainsail update management ----------------------------------
[include moonraker/mainsail.conf]
# -----------------------------------------------------------------

##### Auto Z calibration plugin update management -----------------
[include moonraker/z_calibration.conf]
# -----------------------------------------------------------------


##### Add your custom moonraker config customizations and overrides below this line...
# ------------------------------------------------------------------------------------

[mmu_server]
enable_file_preprocessor: True
enable_toolchange_next_pos: True

[spoolman]
server: http://voron.local:7912
#   URL to the Spoolman instance. This parameter must be provided.
sync_rate: 5
#   The interval, in seconds, between sync requests with the
#   Spoolman server.  The default is 5.

[update_manager mobileraker]
type: git_repo
path: ~/mobileraker_companion
origin: https://github.com/Clon1998/mobileraker_companion.git
primary_branch:main
managed_services: mobileraker
virtualenv: ~/mobileraker-env
requirements: scripts/mobileraker-requirements.txt
install_script: scripts/install.sh

[update_manager happy-hare]
type: git_repo
path: ~/Happy-Hare
origin: https://github.com/moggieuk/Happy-Hare.git
primary_branch: main
install_script: install.sh
managed_services: klipper

[update_manager led_effect]
type: git_repo
path: ~/klipper-led_effect
origin: https://github.com/julianschill/klipper-led_effect.git
is_system_service: False

[update_manager KlipperScreen]
type: git_repo
path: ~/KlipperScreen
origin: https://github.com/moggieuk/KlipperScreen-Happy-Hare-Edition.git
env: ~/.KlipperScreen-env/bin/python
requirements: scripts/KlipperScreen-requirements.txt
install_script: scripts/KlipperScreen-install.sh
managed_services: KlipperScreen

## Klippain Shake&Tune automatic update management
[update_manager Klippain-ShakeTune]
type: git_repo
origin: https://github.com/Frix-x/klippain-shaketune.git
path: ~/klippain_shaketune
virtualenv: ~/klippy-env
requirements: requirements.txt
system_dependencies: system-dependencies.json
primary_branch: main
managed_services: klipper

[update_manager klipper_tmc_autotune]
type: git_repo
channel: dev
path: ~/klipper_tmc_autotune
origin: https://github.com/andrewmcgr/klipper_tmc_autotune.git
managed_services: klipper
primary_branch: main
install_script: install.sh

[update_manager Spoolman]
type: zip
channel: stable
repo: Donkie/Spoolman
path: ~/Spoolman
virtualenv: .venv
requirements: requirements.txt
persistent_files:
  .venv
  .env
managed_services: Spoolman
is_system_service: False

[update_manager klipper_auto_speed]
type: git_repo
path: ~/klipper_auto_speed
origin: https://github.com/anonoei/klipper_auto_speed.git
primary_branch: main
install_script: install.sh
managed_services: klipper

[update_manager sonar]
type: git_repo
path: ~/sonar
origin: https://github.com/mainsail-crew/sonar.git
primary_branch: main
managed_services: sonar
install_script: tools/install.sh

[update_manager Klipper-Adaptive-Meshing-Purging]
type: git_repo
channel: dev
path: ~/Klipper-Adaptive-Meshing-Purging
origin: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging.git
managed_services: klipper
primary_branch: main

[analysis]
platform: auto
#   The platform flavor of Klipper Estimator to use.  Must be a choice
#   from rpi, linux, osx, and auto. Note that "rpi" supports armv7 and
#   aarch64 linux platforms, whereas "linux" supports amd64 linux
#   platform.  The auto choice will attempt to automatically determine
#   the correct platform.  The default is auto.
# estimator_config:
#   A path relative to the "config" root specifying a config
#   file to use for Klipper Estimator.  The default is to
#   use a configuration dumped with data retrieved from Klipper's
#   current settings.
# auto_dump_default_config: false
#   When set to true the default configuration for Klipper Estimator
#   will be dumped every time Klippy restarts.  When false the
#   configuration is only dumped if the default configuration file
#   does not exist.  The default is false.
# estimator_timeout: 600
#   The maximum amount of time (in seconds) Klipper Estimator
#   is given to process a gcode file before processing is
#   aborted.  The default is 600 seconds.
enable_auto_analysis: true
#   When set to true Klipper Estimator will be used to perform a
#   post-process on gcode files immediately prior to metadata extraction.
#   The post-process will update the time estimate and M73 commands present
#   in the gcode file.  This automates the time analysis for any event
#   that triggers metadata processing.   Default is false.
enable_estimator_updates: true
#   When true Moonraker will create and register an entry for
#   klipper_estimator with the update manager.  Default is false.