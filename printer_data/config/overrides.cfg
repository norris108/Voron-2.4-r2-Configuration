############################################# \
######## USER CONFIG OVERRIDES FILE #########  + --> This will help you personalize my config to your printer :)
############################################# /

# This file is yours! Feel free to edit it in order to include all the needed
# things to adapt my generic config to your machine. This file will not be erased
# when updating the config using moonraker and it will be kept as you've set it.
# You can change every section of the config. You can also add some new custom macros, etc...
# The corresponding documentation can be found in: docs > overrides.md

### Also, keep in mind: if you use a multi-MCU config such as the old school double SKRs or a CANbus toolhead
### board, you will need to specify which components are connected to which board in your own mcu.cfg file!
### Example: if something is connected to the toolhead MCU, you should use "config_pin: toolhead:PIN_NAME".

#> Main control MCUs are called "mcu" (and "secondary" when using a double MCU configuration)
#> Toolhead CANboard MCUs are called "toolhead"
#> ERCF MCUs are called "ercf" 

# ------------------------------------------------------------------------------------------


#-------------------------#
#   START_PRINT SEQUENCE  #
#-------------------------#

## The START_PRINT sequence is modular and fully customizable. A default START_PRINT sequence is auto-populated based on
## your probe choice (TAP, Dockable, Inductive), but if for some reasons you still want to modify it, please uncomment the following 3
## lines to define a new `variable_startprint_actions`. You can use any number of action or even duplicate some actions if needed.
## Available actions: "bed_soak", "extruder_preheating", "chamber_soak", "extruder_heating", "tilt_calib", "z_offset", "bedmesh", "purge", "clean", "primeline"
##
[gcode_macro _USER_VARIABLES]
# variable_startprint_actions: "tilt_calib", "extruder_heating", "clean", "z_offset", "bedmesh", "clean", "primeline"
variable_startprint_actions: "tilt_calib", "extruder_heating", "z_offset", "bedmesh", "clean", "primeline"
gcode: # do not remove this line


[auto_speed]

#-------------------------#
#   EXTRUDER/BED PIDs     #
#-------------------------#

## Here is an example of some overrides for the PIDs. I put them here as almost everyone will use them,
## so just uncomment the following lines and change the values according to your own machine
[include config_overrides/hardware/extruder/cw2.cfg]
[include config_overrides/hardware/bed_heaters/vivedino.cfg]


#-------------------------#
#         X MOTOR         #
#-------------------------#

[include config_overrides/hardware/axis/X/stepper_x.cfg]


#-------------------------#
#         Y MOTOR         #
#-------------------------#

[include config_overrides/hardware/axis/Y/stepper_y.cfg]


#-------------------------#
#         Z MOTORS        #
#-------------------------#

[include config_overrides/hardware/axis/Z/steppers_z.cfg]


#-------------------------#
#   Probe Offsets         #
#-------------------------#

## Here is an example of some overrides for bed probes. These frequently have calibrated offsets for xyz,
## and many will need them during setup. If you need to set these, just uncomment the following lines.
# [probe]
# x_offset: -1.85
# y_offset: 29.3
# z_offset: 12.6


#-------------------------#
#    QUAD GANTRY LEVEL    #
#-------------------------#

[include config_overrides/software/tilting/qgl.cfg]


#-------------------------#
#        BED MESH         #
#-------------------------#

[include config_overrides/software/bed_mesh/bed_mesh_350mm.cfg]


#-------------------------#
#      CASE LIGHTS        #
#-------------------------#

[include config_overrides/hardware/lights/neopixel_caselights.cfg]


#-------------------------#
#      SKIRT LIGHTS       #
#-------------------------#

[include config_overrides/hardware/lights/neopixel_skirt_lights.cfg]


#-------------------------#
#    CONTROLLER FAN       #
#-------------------------#

[include config_overrides/hardware/fans/controller_fan.cfg]


#-------------------------#
#   AUTO Z CALIBRATION    #
#-------------------------#

[include config_overrides/software/z_calibration.cfg]


#-------------------------#
#  CHAMBER TEMP SENSOR    #
#-------------------------#

[include config_overrides/hardware/temperature_sensors/chamber_temp.cfg]

#-------------------------#
#    MMU TEMP SENSOR      #
#-------------------------#

# [include config_overrides/hardware/temperature_sensors/btt_mmb_temp.cfg]

#-------------------------#
#      IDLE TIMEOUT       #
#-------------------------#

[include config_overrides/machine.cfg]


#-------------------------#
#       NEVERMORE         #
#-------------------------#

[include config_overrides/hardware/filters/nevermore_filter.cfg]


#-------------------------#
#      INPUT SHAPER       #
#-------------------------#

# [include config_overrides/hardware/accelerometers/kusba.cfg]
[include config_overrides/software/input_shaper.cfg]


#-------------------------#
#         BEEPER          #
#-------------------------#

[include config_overrides/hardware/displays/BTT_mini12864.cfg]


#-------------------------#
#     FILAMENT SENSOR     #
#-------------------------#

# [include config_overrides/hardware/filament_sensors/BTT_SFS_v2.cfg]


#-------------------------#
#      TMC AUTO TUNE      #
#-------------------------#

[include config_overrides/software/autotune_tmc.cfg]


#-------------------------#
#         MACROS          #
#-------------------------#

[include config_overrides/software/macros.cfg]

[servo probeservo]
pin: KLICKY_SERVO
initial_angle: 0
minimum_pulse_width: 0.001

[gcode_macro _ACTIVATE_PROBE_DOCK]
description: Deploys the klicky dock
gcode:
    _KLICKY_SERVO POS=out

[gcode_macro _DEACTIVATE_PROBE_DOCK]
description: Retracts the klicky dock
gcode:
    _KLICKY_SERVO POS=in

[gcode_macro _KLICKY_SERVO]
gcode:
    SET_SERVO SERVO=probeservo ANGLE={0 if params.POS == "in" else 90} DURATION=0.4
    RESPOND MSG="Klicky dock {params.POS}"
    G4 P{0.5 * 1000}
    # SET_SERVO SERVO=probeservo WIDTH=0

[gcode_macro _SERVO_DEPLOY]
gcode:
    {% set item = params.ITEM|string|lower %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set probe_servo_enabled = printer["gcode_macro _USER_VARIABLES"].probe_servo_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}

    {% if item == "probe" %}
        {% if verbose %}
            RESPOND MSG="Deploying probe dock using the servo"
        {% endif %}

        {% if not probe_servo_enabled %}
            { action_raise_error("No servo available for probe. Please include one in your config!") }
        {% endif %}

        {% set probe_servo_name = printer["gcode_macro _USER_VARIABLES"].probe_servo_name %}
        {% set probe_servo_angle_deployed = printer["gcode_macro _USER_VARIABLES"].probe_servo_angle_deployed %}
        SET_SERVO SERVO={probe_servo_name} ANGLE={probe_servo_angle_deployed}
        M400
        G4 P1000
        # SET_SERVO SERVO={probe_servo_name} WIDTH=0

    {% elif item == "purge" or item == "clean" %}
        {% if verbose %}
            RESPOND MSG="Deploying purge bucket and brush using the servo"
        {% endif %}

        {% if not purgeclean_servo_enabled %}
            { action_raise_error("No servo available for purge or clean. Please include one in your config!") }
        {% endif %}

        {% set purgeclean_servo_name = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_name %}
        {% set purgeclean_servo_angle_deployed = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_angle_deployed %}
        SET_SERVO SERVO={purgeclean_servo_name} ANGLE={purgeclean_servo_angle_deployed}
        M400
        G4 P1000
        SET_SERVO SERVO={purgeclean_servo_name} WIDTH=0

    {% else %}
        { action_raise_error("Servo ITEM must be specified!") }
    {% endif %}


[gcode_macro _SERVO_RETRACT]
gcode:
    {% set item = params.ITEM|string|lower %}

    {% set verbose = printer["gcode_macro _USER_VARIABLES"].verbose %}
    {% set probe_servo_enabled = printer["gcode_macro _USER_VARIABLES"].probe_servo_enabled %}
    {% set purgeclean_servo_enabled = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_enabled %}

    {% if item == "probe" %}
        {% if verbose %}
            RESPOND MSG="Rettracting probe dock using the servo"
        {% endif %}

        {% if not probe_servo_enabled %}
            { action_raise_error("No servo available for probe. Please include one in your config!") }
        {% endif %}

        {% set probe_servo_name = printer["gcode_macro _USER_VARIABLES"].probe_servo_name %}
        {% set probe_servo_angle_retracted = printer["gcode_macro _USER_VARIABLES"].probe_servo_angle_retracted %}
        SET_SERVO SERVO={probe_servo_name} ANGLE={probe_servo_angle_retracted}
        M400
        G4 P1000
        # SET_SERVO SERVO={probe_servo_name} WIDTH=0

    {% elif item == "purge" or item == "clean" %}
        {% if verbose %}
            RESPOND MSG="Rettracting purge bucket and brush using the servo"
        {% endif %}

        {% if not purgeclean_servo_enabled %}
            { action_raise_error("No servo available for purge or clean. Please include one in your config!") }
        {% endif %}

        {% set purgeclean_servo_name = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_name %}
        {% set purgeclean_servo_angle_retracted = printer["gcode_macro _USER_VARIABLES"].purgeclean_servo_angle_retracted %}
        SET_SERVO SERVO={purgeclean_servo_name} ANGLE={purgeclean_servo_angle_retracted}
        M400
        G4 P1000
        SET_SERVO SERVO={purgeclean_servo_name} WIDTH=0

    {% else %}
        { action_raise_error("Servo ITEM must be specified!") }
    {% endif %}
